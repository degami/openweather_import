<?php
define('OPENWEATHER_MINUTE' , 60 * 60);
define('OPENWEATHER_HOUR' , OPENWEATHER_MINUTE * 60);
define('OPENWEATHER_DAY' , OPENWEATHER_HOUR * 24);
define('OPENWEATHER_WEEK' , OPENWEATHER_DAY * 7);

// define('SEARCH_BY_NAME','http://api.openweathermap.org/data/2.5/forecast/daily?q=%name&units=metric&cnt=7');
// define('SEARCH_BY_LATLON','http://api.openweathermap.org/data/2.5/forecast/daily?lat=%lat&lon=%lon&units=metric&cnt=7');

define('OPENWEATHER_FORECAST_DAILY','http://api.openweathermap.org/data/2.5/forecast/daily');

/**
 * Implements hook_init().
 */
function openweather_import_init() {
}

/**
 * Implements hook_menu().
 */
function openweather_import_menu() {
  $items['admin/config/openweather_import'] = array(
    'title' => t('OpenWeather import settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openweather_import_settings_form'),
    'access arguments' => array('administer open weather import'),
  );

  $items['admin/config/openweather_import/import_now'] = array(
    'title' => t('OpenWeather start import now'),
    'page callback' => 'openweather_import_start_batch',
    'access arguments' => array('administer open weather import'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function openweather_import_permission() {
  return array(
    'administer open weather import' =>  array(
      'title' => t('administer open weather import'),
      'description' => t('Perform administration tasks for module open weather import'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function openweather_import_theme($existing, $type, $theme, $path) {
  return array(
    'open_weather_weather_block' => array(
      'variables' => array('datefrom' => NULL,'dateto' => NULL),
    ),
  );
}

/**
 * Implements open_weather_weather_block theme.
 */
function theme_open_weather_weather_block($variables){
  global $language;
	$datefrom = $variables['datefrom'];
	$dateto = $variables['dateto'];

  $query = db_select('open_weather_data','w');
  $query->fields('w');

  $query->condition('language',$language->language);
  $query->condition('previsione_data',$datefrom,'>=');
  $query->condition('previsione_data',$dateto,'<');

  $query->orderby('previsione_data','asc');
  $query->range(0, variable_get('open_weather_block_elems',4));

  $result = $query->execute()->fetchAll(PDO::FETCH_OBJ);

  foreach($result as &$row){
    $row->previsione_obj = unserialize($row->previsione_obj);
    drupal_alter('openweather_previsione', $row);
  }

  $rows = array();
  foreach($result as $r){
      $image = theme('image',array('path'=> drupal_get_path('module','openweather_import').'/images/'.basename( $r->previsione_simbolo ) ));

      $text = '<div class="label data-lbl">'.format_date($r->previsione_data,'short').'</div>';
      if( variable_get('open_weather_block_show_temperature',true) == true){
        $text .= '<div class="label temperatura">'. $r->previsione_temperatura.'</div>';
      }

      $rows[0]['data'][]=  array('data'=>$image);
      $rows[0]['no_striping']=true;

      $rows[1]['data'][]=  array('data'=>$text);
      $rows[0]['no_striping']=true;
  }

  drupal_add_css(drupal_get_path('module', 'openweather_import').'/css/open_weather_block.css');
	return theme('table',array('rows'=>$rows,'header'=>null,'attributes'=>array( 'class'=>array('open_weather') ) ));
}


/**
 * Implements hook_block_info().
 */
function openweather_import_block_info() {
  $blocks = array();
  $blocks['open_weather_block'] = array(
    'info' => t('Weather Block'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function openweather_import_block_configure($delta = '') {
  $form = array();
  if ($delta == 'open_weather_block') {
    $form['open_weather_block_elems'] = array(
      '#type' => 'textfield',
      '#title' => t('# element to display'),
      '#default_value' => variable_get('open_weather_block_elems', 4),
    );
    $form['open_weather_block_show_temperature'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show Temperature'),
      '#default_value' => variable_get('open_weather_block_show_temperature', true),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save($delta = '', $edit = array().
 */
function openweather_import_block_save($delta = '', $edit = array()) {
  if ($delta == 'open_weather_block') {
    variable_set('open_weather_block_elems', $edit['open_weather_block_elems']);
    variable_set('open_weather_block_show_temperature', $edit['open_weather_block_show_temperature']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function openweather_import_block_view($delta = '') {
  global $language;
  $block = array();

  switch ($delta) {
    case 'open_weather_block':
  	  $datefrom = time();
      $datefrom = strtotime(date("Y-m-d 0:0:0",$datefrom));
      $dateto = $datefrom + 1*OPENWEATHER_DAY;

      $block['subject'] = variable_get('openweather_import_blocktitle_'.$language->language,t('Open Weather'));
      $block['content'] = theme('open_weather_weather_block', array('datefrom' => $datefrom,'dateto' => $dateto));
      break;
  }
  return $block;
}

/**
 * Implements hook_cron().
 */
function openweather_import_cron() {
	foreach ( language_list() as $lang ){
		$data_array = _openweather_import_download_data($lang->language);
		if( $data_array !== false ){
      foreach($data_array as $data){
        $parsed_elements = _openweather_import_parse_json_data($data,$lang->language);
        if(is_array($parsed_elements) && count($parsed_elements) > 0){
          _openweather_import_writedata($parsed_elements);
        }
      }
		}
	}
}

function openweather_import_settings_form($form,&$form_state){
  $form['openweather_import_apikey']=array(
    '#type'=>'textfield',
    '#title'=>'OpenWeather API key',
    '#default_value' => variable_get("openweather_import_apikey",''),
  );
  $form['openweather_import_locationstring']=array(
    '#type'=>'textarea',
    '#title'=>'Location da scaricare',
    '#default_value' => variable_get("openweather_import_locationstring",''),
    '#description' => 'uno per linea. può essere in formato [nome città] o in formato [latitudine],[longitudine]',
  );

	foreach ( language_list() as $lang ){
    $form['fieldset_'.$lang->language]=array(
      '#type'=>'fieldset',
      '#title'=>'Variables - Language '.strtoupper($lang->language),
      '#collapsible' => true,
      '#collapsed' => true,
    );
    $form['fieldset_'.$lang->language]['openweather_import_get_langcode_'.$lang->language]=array(
      '#type'=>'checkbox',
      '#title'=>'Scarica dati in questa lingua',
      '#default_value' => variable_get('openweather_import_get_langcode_'.$lang->language,true),
    );
    $form['fieldset_'.$lang->language]['openweather_import_blocktitle_'.$lang->language]=array(
      '#type'=>'textfield',
      '#title'=>'Titolo blocco lingua',
      '#default_value' => variable_get('openweather_import_blocktitle_'.$lang->language,t('Open Weather')),
    );
	}

	return system_settings_form($form);
}

function openweather_import_settings_form_validate($form,&$form_state){
}

function _openweather_import_download_data($langcode = ''){
  $out = array();

  if(trim($langcode) == '') return false;
  if(variable_get('openweather_import_get_langcode_'.$langcode, false) == false) return false;
  //$locationstring = trim(variable_get('openweather_import_locationstring',''));
  $locationstrings = array_filter( array_map('trim', explode("\n", trim(variable_get('openweather_import_locationstring','')))));
  if(count($locationstrings) == 0) return false;

  foreach($locationstrings as $locationstring){
    $urltoget = '';$options = array();

    if(preg_match("/^([0-9\.]+)\s*,\s*([0-9\.]+)$/msi",$locationstring,$matches)){
      // con latitudine, longitudine
      //$urltoget = str_replace( '%lat',$matches[1], str_replace( '%lon',$matches[2], SEARCH_BY_LATLON ));
      $urltoget = OPENWEATHER_FORECAST_DAILY;
      $options = array(
        'query' => array(
          'lat'=>$matches[1],
          'lon'=>$matches[2],
          'units'=>'metric',
          'cnt'=>'7',
          'lang' => $langcode,
        ),
      );
    }else{
      // con query città
      //$urltoget = str_replace( '%name',urlencode($locationstring), SEARCH_BY_NAME );
      $urltoget = OPENWEATHER_FORECAST_DAILY;
      $options = array(
        'query' => array(
          'q'=>$locationstring,
          'units'=>'metric',
          'cnt'=>'7',
          'lang' => $langcode,
        ),
      );
    }

    if(trim($urltoget) == '') continue;
    $out = array_merge($out, array( __openweather_import_get_json($urltoget, $options) ));
  }

  if(count($out)==0) return false;
  return $out;
}

function __openweather_import_get_json($url, $options = array()){
  $json_obj = false;

  $options['external'] = true;
  $options['query']['APPID']=variable_get('openweather_import_apikey','');
  $url = url($url,$options);
  watchdog('openweather_import', 'download json url: @url', array('@url'=>$url));
  $response = drupal_http_request($url);
  if( $response->code == 200 ){
    $json_obj = drupal_json_decode($response->data);
  }
  return $json_obj;
}

function _openweather_import_parse_json_data($jsondata,$langcode){
  // trasforma risultato json in tanti elementi pronti per essere registrati su db
  $out = array();

  foreach($jsondata['list'] as $elem){
    $el = new stdClass;
    $el->created = time();
    $el->language = $langcode;

    $el->json = new stdClass;

    $el->json->city = $jsondata['city'];
    $el->json->data = $elem;

    $el->previsione_data = $el->json->data['dt'];
    $el->previsione_city_id = $el->json->city['id'];
    $el->previsione_simbolo = _translateicon($el->json->data['weather'][0]['icon']);
    $el->previsione_cielo = $el->json->data['weather'][0]['description'];

    // temperatura maggiore di 100 ? magari è in gradi kelvin
    $el->previsione_temperatura =  (($el->json->data['temp']['day'] > 100) ? _kelvin2celsius($el->json->data['temp']['day']) : $el->json->data['temp']['day']).'&deg;';
    $el->previsione_temperatura_min = (($el->json->data['temp']['min'] > 100) ? _kelvin2celsius($el->json->data['temp']['min']) : $el->json->data['temp']['min']).'&deg;';
    $el->previsione_temperatura_max = (($el->json->data['temp']['max'] > 100) ? _kelvin2celsius($el->json->data['temp']['max']) : $el->json->data['temp']['max']).'&deg;';

    $out[] = $el;
  }

  return $out;
}

function _translateicon($imagecode){

  $icons = array(
    '01d' => 'a1', '01n' => 'a1',  // sky is clear
    '02d' => 'a3', '02n' => 'a3',  // few clouds
    '03d' => 'a6', '03n' => 'a6',  // scattered clouds
    '04d' => 'a5', '04n' => 'a5',  // broken clouds
    '09d' => 'b7', '09n' => 'b7',  // shower rain
    '10d' => 'b5', '10n' => 'b5',  // Rain
    '11d' => 'c10', '11n' => 'c10',  // Thunderstorm
    '13d' => 'd7', '13n' => 'd7',  // snow
    '50d' => 'f4', '50n' => 'f4',  // mist
  );
  return $icons[$imagecode].'.png';
}

function _kelvin2celsius($kelvin){
  return $kelvin - 273.15;
}

function _openweather_import_writedata($data = array()){
  foreach($data as $element){
    db_delete('open_weather_data')
      ->condition('previsione_data',$element->previsione_data)
      ->condition('language',$element->language)
      ->condition('previsione_city_id',$element->previsione_city_id)
      ->execute();

    $query = db_insert('open_weather_data');
    $query->fields(array(
      'created' => $element->created,
      'language' => $element->language,
      'previsione_data' => $element->previsione_data,
      'previsione_city_id' => $element->previsione_city_id,
      'previsione_simbolo' => $element->previsione_simbolo,
      'previsione_cielo' => $element->previsione_cielo,
      'previsione_temperatura' => $element->previsione_temperatura,
      'previsione_temperatura_min' => $element->previsione_temperatura_min,
      'previsione_temperatura_max' => $element->previsione_temperatura_max,
      'previsione_obj' => serialize($element),
    ));
    $query->execute();
  }
}

function openweather_import_start_batch(){
  $batch = array(
      'title' => t('Download open weather data ...'),
      'operations' => array(),
      'init_message' => t('Commencing'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('An error occurred during processing'),
      'finished' => 'openweather_import_batch_finished',
      'progressive' => FALSE
  );

  foreach(language_list() as $lang){
    $batch['operations'][] = array('openweather_import_batch_worker', array($lang->language));
  }

  batch_set($batch);
  batch_process('admin/config/openweather_import');
}

function openweather_import_batch_worker($langcode, &$context) {
  $data_array = _openweather_import_download_data($langcode);
  if( $data_array !== false ){
    foreach($data_array as $data){
      $parsed_elements = _openweather_import_parse_json_data($data,$langcode);
      if(is_array($parsed_elements) && count($parsed_elements) > 0){
        _openweather_import_writedata($parsed_elements);
      }
    }
  }

  if(!isset($context['results']['processed'])) $context['results']['processed']=0;
  if(!isset($context['results']['message'])) $context['results']['message']='';
  $context['results']['processed']++;
  $context['results']['message'] .= $langcode." downloaded - ". count( $parsed_elements )." elements found<br />\n";
}

function openweather_import_batch_finished($success, $results, $operations) {
  watchdog('openweather_import', 'openweather_import_batch_finished - :results', array(':results'=>serialize($results)));
  $message='';
  if ($success) {
    if(isset($results['message'])) $message.= $results['message'].'<br />';
    $message .= format_plural($results['processed'], 'One element processed.', '@count elements processed.');
  } else {
    $message = 'some errors';
  }

  drupal_set_message($message);
}
